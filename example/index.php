<?php/** * Created by PhpStorm. * User: chenhong * Date: 2020/12/10 * Time: 11:15 AM * @author chenhong <747825455@qq.com> */use Image\Compression\Type;use Image\Contract\FinishInterface;use Image\Contract\ReportEncodingProgressInterface;use Image\Event\Finish;use Image\Event\ReportEncodingProgress;use Image\ImageFactory;use Image\Listener\FinishListener;use Image\Listener\ReportEncodingProgressListener;use Symfony\Component\VarDumper\Cloner\VarCloner;use Symfony\Component\VarDumper\Dumper\CliDumper;use Symfony\Component\VarDumper\Dumper\HtmlDumper;use Symfony\Component\VarDumper\VarDumper;require_once realpath( dirname( __DIR__ ) . DIRECTORY_SEPARATOR . 'vendor' . DIRECTORY_SEPARATOR . 'autoload.php' );VarDumper::setHandler( function ( $var ) {    $cloner = new VarCloner();    //$cloner->setMaxItems(2);  // 设置一个嵌套级别（past the first nesting level)被克隆的元素的最大值//    $cloner->setMinDepth(1);  // 在深度上的剥离限制。//    $cloner->setMaxItems(5);    $dumper = 'cli' === PHP_SAPI ? new CliDumper() : new HtmlDumper();    $data   = $cloner->cloneVar( $var );    $dumper->dump( $data );} );class TestListener extends ReportEncodingProgressListener{    /**     *     * @param ReportEncodingProgress| object $event     */    public function process( object $event )    {        $event->progress;        $event->currentFile;//        dump( $event->currentFile . ' process ====== ' . $event->progress );    }}class TestFinishListener extends FinishListener{    /**     *     * @param Finish| object $event     */    public function process( object $event )    {        $event->currentFile;//当前文件名        $event->compressionRatio;//压缩比        $event->distImageSize;//压缩后文件大小        $event->distPath;//压缩后文件路径        $event->originImageSize;//原图大小        dump($event->currentFile . ' Finish compressionRatio=' . $event->compressionRatio . '% ====' . $event->distPath);    }}$config = [    'type'       => Type::CJPEG ,    'output_dir' => './',//    'bin' => '.1111',    'listener'   => [        ReportEncodingProgressInterface::class => TestListener::class ,        FinishInterface::class                 => TestFinishListener::class ,    ] ,];//https://wenda.swoole.com/storage/avatar/avatar-1.png $webpPath = ImageFactory::create($config)    ->setQuality( 75 )    ->enableAsync()//    ->inputs([//        //'https://wenda.swoole.com/storage/avatar/avatar-1.png',//        'WechatIMG409.jpeg'//    ])//      ->inputs([//          [ 'WechatIMG409.jpeg' , 'adfa'],//          ['https://wenda.swoole.com/storage/avatar/avatar-1.png' ],//      ])    ->input( 'origin.jpeg','webp' )//    ->input( 'https://wenda.swoole.com/storage/avatar/avatar-1.png' ,'avatar-1')//    ->input( 'https://www.baidu.com' ,'baidu')//    ->input( './1.jpg' )//    ->crop(100,100,100,100)//    ->resize(10,10)    ->output( );//dump($webpPath);